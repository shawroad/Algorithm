"""

@file  : 1-小Q爬塔.py

@author: xiaolu

@time  : 2019-10-09

"""
"""
题目:　
   小Q正在攀爬一座宝塔,这座宝塔很特别,塔总共有n层,但是每层之间的净高度不同,所以造成了小Q爬过每层的时间也不同.如果某一层的高度
为x,那么爬过这一层所需要的时间也是x. 小Q会使用一种魔法,每用一次可以让他向上跳一层或者两层,但是每次跳跃后小Q都将用完魔法,必须爬
过至少一层才能再次跳跃(你也可以认为小Q需要跳两次一层才能休息,最后也可以跳到塔外即超过塔高,跳是不消耗时间的)
　　小Q想用最短的时间爬到塔顶,希望你告诉他最短时间
输入:
   第一行一个数n (n < 10000), 表示塔的层数
   接下来的n行每行一个数h (1 <= h <= 100),表示从下往上每层的高度
样例:
   输入:
   5
   3
   4
   1
   8
   4
   输出: 1
解决方案:
   p[i] 表示到第i层的最短时间,并且到达第i层的方式是爬
   t[i] 表示到第i层的最短时间,并且到达第i层的方式是跳
   到达第i层的方式采用爬还是采用跳:
        情况1: 到达第i层的方式是爬
　　　　　　　那么到达第i-1层的方式可以是爬也可以是跳,从两者中选最小
　　　　　　　p[i] = min(t[i-1], p[i-1]) + a[i]
        情况2: 到达第i层的方式是跳
           那么可以从第i-1层起跳, 也可以从第i-2层起跳.并且到达第i-1层和i-2层的方式只能选爬,所以取两者中最小
           t[i] = min(p[i-1], p[i-2])
        最后在p[n]和t[n]中选最小者作为结果
"""
if __name__ == '__main__':
    layer = int(input())
    height = []
    # 高度输入是从最底层一层往上层输
    for i in range(layer):
        height.append(int(input()))
    print(height)
    # layer = 5
    # height = [3, 5, 1, 8, 4]

    p = [0 for i in range(layer)]
    t = [0 for i in range(layer)]

    p[0] = height[0]  # 第一层选择爬
    p[1] = height[1]  # 第二层选择爬　还想让时间最短　那第一层就只能跳 所以p[1] = height[1]

    # 如果两层 肯定都选择跳　时间都是零
    t[0] = 0
    t[1] = 0
    for i in range(2, layer):
        p[i] = min(t[i-1], p[i-1]) + height[i]
        t[i] = min(p[i-1], p[i-2])

    print(min(t[layer-1], p[layer-1]))






