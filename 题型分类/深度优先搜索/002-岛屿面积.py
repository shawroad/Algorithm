# -*- coding: utf-8 -*-
# @Time    : 2020/8/15 13:49
# @Author  : xiaolu
# @FileName: 010-岛屿面积.py
# @Software: PyCharm
'''
给定一个包含了一些 0 和 1 的非空二维数组 grid 。
一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。
你可以假设 grid 的四个边缘都被 0（代表水）包围着。
找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)
 

示例 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
'''
from typing import List


def maxAreaOfIsland(grid: List[List[int]]) -> int:
    m, n = len(grid), len(grid[0])

    def dfs(i, j):
        nonlocal c
        if grid[i][j] == 1:
            grid[i][j] = 0
            c += 1

        for dx, dy in [(-1, 0), (0, -1), (0, 1), (1, 0)]:
            x = i + dx
            y = j + dy
            if 0 <= x < m and 0 <= y < n and grid[x][y] == 1:
                dfs(x, y)


    result = []
    c = 0
    for i in range(m):
        for j in range(n):
            if grid[i][j] == 1:
                c = 0
                dfs(i, j)
            result.append(c)
    return max(result)


if __name__ == '__main__':
    # data = [[0,0,1,0,0,0,0,1,0,0,0,0,0],
    #         [0,0,0,0,0,0,0,1,1,1,0,0,0],
    #         [0,1,1,0,1,0,0,0,0,0,0,0,0],
    #         [0,1,0,0,1,1,0,0,1,0,1,0,0],
    #         [0,1,0,0,1,1,0,0,1,1,1,0,0],
    #         [0,0,0,0,0,0,0,0,0,0,1,0,0],
    #         [0,0,0,0,0,0,0,1,1,1,0,0,0],
    #         [0,0,0,0,0,0,0,1,1,0,0,0,0]]
    # data = [[1, 1, 0, 0, 0],
    #         [1, 1, 0, 0, 0],
    #         [0, 0, 0, 1, 1],
    #         [0, 0, 0, 1, 1]]
    data = [[0]]
    result = maxAreaOfIsland(data)
    print(result)





